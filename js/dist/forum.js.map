{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAY,I,aCA7D,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,e,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAc,M,aCA/D,MAAM,EAA+BF,OAAOC,KAAKC,OAAe,OCA1D,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,+B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,0B,aCOxDC,IAAAA,aAAiBC,IAAI,oBAAoB,WACrCC,IAAAA,UAAeC,gCAAkCC,IAAAA,UAAgB,mCACjEF,IAAAA,UAAeG,qBAAuBD,IAAAA,UAAgB,yBCLtDE,EAAAA,EAAAA,QAAOC,IAAAA,UAAwB,SAAS,SAAUC,GAC9C,IAAMC,EAAgBC,OAAOC,SAASC,OAEtCJ,EAAMP,IAAI,mBACNY,EAAE,SAAU,CAAEC,OAAO,EAAMC,IAAK,gDAC5B,sBAAuB,cACvB,YAAa,QACb,cAAe,KACf,gBAAkBN,EAAgB,iBAClC,sBAAuB,UAEnC,KCRAH,EAAAA,EAAAA,QAAOU,IAAAA,UAA4B,uBAAuB,SAAUR,GAChE,GAAKR,IAAAA,MAAUiB,UAAU,wCAAzB,CAIA,IAAIC,EAAOlB,IAAAA,QAAYkB,KAClBA,GAASA,EAAKf,mCAKnBK,EAAMP,IAAI,WAAY,CAClBkB,KAAM,WACNC,KAAM,wBACNC,MAAOrB,IAAAA,WAAesB,MAAM,+DAXhC,CAaJ,KACAhB,EAAAA,EAAAA,QAAOiB,IAAAA,UAAwB,gBAAgB,SAAUf,GACrD,GAAKR,IAAAA,MAAUiB,UAAU,wCAAzB,CAGA,IAAIC,EAAOlB,IAAAA,QAAYkB,KACnBA,IAASA,EAAKf,mCAEdK,EAAMP,IAAI,mBACNY,EAAA,WACIA,EAACW,IAAW,CACRC,UAAU,+BACVC,MAAM,mCACNN,KAAK,wBACLO,KAAK,kBACJ3B,IAAAA,WAAesB,MAAM,iDAXtC,CAgBJ,KACAhB,EAAAA,EAAAA,QAAOiB,IAAAA,UAAwB,sBAAsB,SAAUf,GAE3D,GAAKR,IAAAA,MAAUiB,UAAU,wCAAzB,CAIA,IAAIC,EAAOlB,IAAAA,QAAYkB,KACvB,GAAKA,GAASA,EAAKb,uBAAnB,CAIA,IAAMuB,EAAc5B,IAAAA,MAAUiB,UAAU,gCAExCT,EAAMP,IAAI,uBAAwB,CAC9B4B,KAAI,WACA,OAAOhB,EAAE,SAAUA,EAAE,IAAKb,IAAAA,WAAesB,MAAM,uDAAwD,CACnG1C,EAAGiC,EAAE,IAAK,CAACiB,KAAM,gBAAkBF,IACnCG,SAAU,IAAMH,KAExB,GAVJ,CALA,CAiBJ,GFpDJ,G","sources":["webpack://@nodeloc/telegram/webpack/bootstrap","webpack://@nodeloc/telegram/webpack/runtime/compat get default export","webpack://@nodeloc/telegram/webpack/runtime/define property getters","webpack://@nodeloc/telegram/webpack/runtime/hasOwnProperty shorthand","webpack://@nodeloc/telegram/webpack/runtime/make namespace object","webpack://@nodeloc/telegram/external root \"flarum.core.compat['app']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['models/User']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['Model']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['extend']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['components/LogInButtons']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['components/NotificationGrid']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['components/SettingsPage']\"","webpack://@nodeloc/telegram/external root \"flarum.core.compat['components/LogInButton']\"","webpack://@nodeloc/telegram/./src/forum/index.js","webpack://@nodeloc/telegram/./src/forum/addLoginButton.js","webpack://@nodeloc/telegram/./src/forum/addNotificationMethod.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/LogInButtons'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/NotificationGrid'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/SettingsPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/LogInButton'];","import app from 'flarum/app';\r\nimport User from 'flarum/models/User';\r\nimport Model from 'flarum/Model';\r\nimport addLoginButton from './addLoginButton';\r\nimport addNotificationMethod from './addNotificationMethod';\r\n\r\n\r\napp.initializers.add('nodeloc-telegram', () => {\r\n    User.prototype.canReceiveTelegramNotifications = Model.attribute('canReceiveTelegramNotifications');\r\n    User.prototype.nodelocTelegramError = Model.attribute('nodelocTelegramError');\r\n\r\n    addLoginButton();\r\n    addNotificationMethod();\r\n});\r\n","import {extend} from 'flarum/extend';\r\nimport LogInButtons from 'flarum/components/LogInButtons';\r\n\r\nexport default function () {\r\n    extend(LogInButtons.prototype, 'items', function (items) {\r\n        const currentDomain = window.location.origin;\r\n        // Replace the Telegram widget script\r\n        items.add('nodeloc-telegram',\r\n            m('script', { async: true, src: 'https://telegram.org/js/telegram-widget.js?22',\r\n                'data-telegram-login': 'nodeloc_bot',\r\n                'data-size': 'large',\r\n                'data-radius': '10',\r\n                'data-auth-url':  currentDomain + '/auth/telegram',\r\n                'data-request-access': 'write' })\r\n        );\r\n    });\r\n}\r\n","import {extend} from 'flarum/extend';\r\nimport app from 'flarum/app';\r\nimport NotificationGrid from 'flarum/components/NotificationGrid';\r\nimport SettingsPage from 'flarum/components/SettingsPage';\r\nimport LogInButton from 'flarum/components/LogInButton';\r\n\r\nexport default function () {\r\n    extend(NotificationGrid.prototype, 'notificationMethods', function (items) {\r\n        if (!app.forum.attribute('nodeloc-telegram.enableNotifications')) {\r\n            return;\r\n        }\r\n\r\n        let user = app.session.user;\r\n        if (!user || !user.canReceiveTelegramNotifications()) {\r\n            return;\r\n        }\r\n\r\n        // Add telegram notifications method column\r\n        items.add('telegram', {\r\n            name: 'telegram',\r\n            icon: 'fab fa-telegram-plane',\r\n            label: app.translator.trans('nodeloc-telegram.forum.settings.notify_by_telegram_heading'),\r\n        });\r\n    });\r\n    extend(SettingsPage.prototype, 'accountItems', function (items) {\r\n        if (!app.forum.attribute('nodeloc-telegram.enableNotifications')) {\r\n            return;\r\n        }\r\n        let user = app.session.user;\r\n        if (user && !user.canReceiveTelegramNotifications()) {\r\n            // add button to link current account with telegram\r\n            items.add('nodeloc-telegram',\r\n                <div>\r\n                    <LogInButton\r\n                        className=\"Button LogInButton--telegram\"\r\n                        style=\"display:inline-block; width:auto\"\r\n                        icon=\"fab fa-telegram-plane\"\r\n                        path=\"/auth/telegram\">\r\n                        {app.translator.trans('nodeloc-telegram.forum.link_telegram_button')}\r\n                    </LogInButton>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n    extend(SettingsPage.prototype, 'notificationsItems', function (items) {\r\n\r\n        if (!app.forum.attribute('nodeloc-telegram.enableNotifications')) {\r\n            return;\r\n        }\r\n\r\n        let user = app.session.user;\r\n        if (!user || !user.nodelocTelegramError()) {\r\n            return;\r\n        }\r\n\r\n        const botUsername = app.forum.attribute('nodeloc-telegram.botUsername');\r\n\r\n        items.add('nodelocTelegramError', {\r\n            view() {\r\n                return m('.Alert', m('p', app.translator.trans('nodeloc-telegram.forum.settings.unblock_telegram_bot', {\r\n                    a: m('a', {href: 'https://t.me/' + botUsername}),\r\n                    username: '@' + botUsername,\r\n                })))\r\n            },\r\n        });\r\n    });\r\n}\r\n\r\n\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","add","User","canReceiveTelegramNotifications","Model","nodelocTelegramError","extend","LogInButtons","items","currentDomain","window","location","origin","m","async","src","NotificationGrid","attribute","user","name","icon","label","trans","SettingsPage","LogInButton","className","style","path","botUsername","view","href","username"],"sourceRoot":""}